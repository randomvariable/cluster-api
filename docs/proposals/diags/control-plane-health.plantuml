@startuml
!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/release/1-0/C4_Container.puml
title Control plane healthcheck

start
note
Yellow green denotes a communication with the cluster hosting Cluster API
Pastel green denotes a communication with the managed cluster
end note
:Healthcheck(Cluster);
#LightGreen:get ControlPlane and Cluster;
if (ControlPlane.OwnerReferences contains a Cluster) then (true)
  if (Cluster.Status.InfrasStructureReady == true) then (true)
    #GreenYellow:if (kubeadm-config configmap exists) then (true)
      :ControlPlane.Status.Initialized = true;
    else
      :ControlPlane.Status.Initialized = false;
    endif
    #GreenYellow:if (kubelet-config-$version configmap exists) then (true)
      :ControlPlane.Status.VersionInitialized = true;
    else
      :ControlPlane.Status.VersionInitialized = false;
    endif
    #LightGreen:get all machines with label cluster.x-k8s.io/controlplane == true && cluster.x-k8s.io/cluster-name == <cluster>;
    #GreenYellow:get all pods where priorityClassName == system-cluster-critical;
    while (more pods?) is (true)
      :ControlPlane.Status.CriticalPods += 1;
      if (Pod.PodStatus.phase == Running or Succeeded) then (true)
        :ControlPlane.Status.CriticalPodsAvailable += 1;
      else (false)
      endif
    endwhile
    #GreenYellow:get all pod with labels component == etcd, tier == control-plane in kube-system namespace;
    while (more pods?) is (true)
      #GreenYellow:if (haven't run etcdctl and Pod/ExecAction(`etcdctl ... cluster-health`) == 200) then (true)
        note right
          etcdctl's CLI interface is not very stable. Could attempt to port-forward directly to etcd to get the information via the Rest API as Cluster API will have all the relevant certificates.
        end note
        :parse member list;
        while (more members?) is (true)
          :ControlPlane.Status.DatastoreReplicas += 1;
          if (member is ok) then (true)
            :ControlPlane.Status.DatastoreAvailableReplicas += 1;
          else (false)
            #LightGreen:post EtcdUnhealthy event to machine with unhealthy member;
          endif
        endwhile
        else (false)
        endif
    endwhile
    #GreenYellow::get deployment and daemonsets with labels k8s-app=kube-dns, ns=kube-system;
    note right
      check for both daemonsets and deployments to cover where node-local-dns is being deployed.
    end note
    while (more deployments?) is (true)
      :ControlPlane.Status.DNSReplicas += Deployment.Spec.Replicas;
      :ControlPlane.Status.DNSAvailable += Deployment.Status.AvailableReplicas;
    endwhile
    while (more daemonsets?) is (true)
      :ControlPlane.Status.DNSReplicas += Daemonset.Spec.Replicas;
      :ControlPlane.Status.DNSAvailable += Daemonset.Status.AvailableReplicas;
    endwhile
  else (false)
  endif
else (false)
endif
#LightGreen:patch ControlPlane.Status;

stop

@enduml
